#!/bin/sh

CMDSHELL="$(command -v cmd.exe || echo '/mnt/c/Windows/system32/cmd.exe')"
USERPROFILE=$(wslpath "$($CMDSHELL /V:OFF /C 'echo | set /p t=%USERPROFILE%' 2>/dev/null)")
GVPROXY_STORE="/files/wsl-gvproxy.exe"
GVPROXY_PATH="$USERPROFILE/wsl-vpnkit/wsl-gvproxy.exe"

echo "starting wsl-vpnkit"

# Failsafe configuration to run as a standalone script
TAP_NAME=${TAP_NAME:-tap0}
VPNKIT_GATEWAY_IP=${VPNKIT_GATEWAY_IP:-192.168.127.1}
VPNKIT_HOST_IP=${VPNKIT_HOST_IP:-192.168.127.254}
VPNKIT_WSL2_IP=${VPNKIT_LOWEST_IP:-192.168.127.2}
VPNKIT_DEBUG=${VPNKIT_DEBUG:-}
CHECK_DNS=${CHECK_DNS:-1.1.1.1}
CHECK_HOST=${CHECK_HOST:-example.com}

WSL2_GATEWAY_IP="$(cat /etc/resolv.conf | awk '/^nameserver/ {print $2}')"
DNS_IP="$VPNKIT_GATEWAY_IP"

hash () {
    md5sum "$1" | awk '{ print $1 }'
}

install_file () {
    if [ -f $2 ]; then
        if [ ! -f "$3" ]; then
            mkdir -p "$(dirname $3)"
            cp $2 "$3"
            echo "copied $1 to $3"
        else
            echo "$1 exists at $3"
            if [ `hash $2` != `hash "$3"` ]; then
                cp -f $2 "$3"
                echo "updated $1 at $3"
            fi
        fi
    fi
}

install () {
    install_file wsl-gvproxy.exe "$GVPROXY_STORE" "$GVPROXY_PATH"
}

run () {
    echo "starting gvproxy..."
    wsl-vm -path "$GVPROXY_PATH" &
    echo "started gvproxy"
}

tap_wait () {
    while [ ! -e "/sys/class/net/$TAP_NAME" ]; do
        sleep 0.1
    done
    sleep 0.1
}

ipconfig () {
    echo "configuring ip..."
    ip route | grep -e "$VPNKIT_GATEWAY_IP" -e 'default' | tr '\n' '\0' | xargs -0 -n 1 sh -c 'ip route del $1' argv0
    echo "ip config done"

    echo "adding rules to iptables..."
    iptables -t nat -A PREROUTING -d $WSL2_GATEWAY_IP/32 -p udp -m udp --dport 53 -j DNAT --to-destination $DNS_IP:53
    iptables -t nat -A PREROUTING -d $WSL2_GATEWAY_IP/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination $DNS_IP:53
    iptables -t nat -A PREROUTING -d $WSL2_GATEWAY_IP/32 -j DNAT --to-destination $VPNKIT_HOST_IP
    iptables -t nat -A OUTPUT -d $WSL2_GATEWAY_IP/32 -p udp -m udp --dport 53 -j DNAT --to-destination $DNS_IP:53
    iptables -t nat -A OUTPUT -d $WSL2_GATEWAY_IP/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination $DNS_IP:53
    iptables -t nat -A OUTPUT -d $WSL2_GATEWAY_IP/32 -j DNAT --to-destination $VPNKIT_HOST_IP
    iptables -t nat -A POSTROUTING -o $TAP_NAME -j MASQUERADE
    echo "iptables done"
}

check_ping () {
    ping -$1 -c 1 $3 >/dev/null && \
        echo "check: ✔️ ping success to IPv$1 $2 ($3)" || \
        echo "check: $([ $1 = '6' ] && echo '➖' || echo '❌') ping fail to IPv$1 $2 ($3)"
}

check_dns () {
    TYPE=$([ "$1" = "4" ] && echo 'A' || echo 'AAAA')
    nslookup -type=$TYPE $2 $3 >/dev/null && \
        echo "check: ✔️ nslookup success for $2 $TYPE using $3" || \
        echo "check: ❌ nslookup fail for $2 $TYPE using $3"
}

check_https () {
    wget --spider -q $1 && \
        echo "check: ✔️ wget success for $1" || \
        echo "check: ❌ wget fail for $1"
}

check () {
    check_ping 4 'WSL 2 gateway / Windows host' $WSL2_GATEWAY_IP
    check_ping 4 'Windows host' $VPNKIT_HOST_IP
    check_ping 4 'gateway' $VPNKIT_GATEWAY_IP
    check_dns 4 $CHECK_HOST $DNS_IP
    check_dns 4 $CHECK_HOST $VPNKIT_GATEWAY_IP
    check_dns 4 $CHECK_HOST $WSL2_GATEWAY_IP
    check_dns 4 $CHECK_HOST $CHECK_DNS
    check_ping 4 'external host' $CHECK_HOST
    check_dns 6 $CHECK_HOST $DNS_IP
    check_dns 6 $CHECK_HOST $VPNKIT_GATEWAY_IP
    check_dns 6 $CHECK_HOST $WSL2_GATEWAY_IP
    check_dns 6 $CHECK_HOST $CHECK_DNS
    check_ping 6 'external host' $CHECK_HOST
    check_https "https://$CHECK_HOST"
}

cleanup () {
    echo "cleaning up iptables..."
    iptables -t nat -S | grep $VPNKIT_GATEWAY_IP | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep $VPNKIT_HOST_IP | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep $TAP_NAME | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    echo "iptables cleanup done"

    echo "cleaning up ip..."
    ip route add default via $WSL2_GATEWAY_IP dev eth0
    echo "ip cleanup done"
}

close () {
    cleanup
    echo "stopped wsl-vpnkit"
    kill 0
}

if [ ${EUID:-$(id -u)} -ne 0 ]; then
    echo "Please run this script as root"
    exit 1
fi

cleanup
install
run
tap_wait
ipconfig
check
trap close exit
trap exit int term
wait
